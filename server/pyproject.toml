[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-server-sparql"
version = "1.0.0"
description = "SPARQL-enabled MCP server with caching and result formatting"
readme = "README.md"
license = {text = "AGPL-3.0"}
authors = [
    {name = "Temkit Sid-Ali", email = "dev@yet.lu"}
]
maintainers = [
    {name = "Temkit Sid-Ali", email = "dev@yet.lu"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database :: Database Engines/Servers",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]
keywords = ["sparql", "mcp", "semantic-web", "rdf", "fastmcp", "model-context-protocol"]
requires-python = ">=3.8"
dependencies = [
    "SPARQLWrapper>=2.0.0",
    "fastmcp>=2.0.0",
    "pydantic>=2.0.0",
    "python-daemon>=2.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "safety>=2.3.0",
    "bandit>=1.7.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "responses>=0.23.0",
]

[project.urls]
Homepage = "https://github.com/yet-market/yet-sparql-mcp-server"
Documentation = "https://github.com/yet-market/yet-sparql-mcp-server#readme"
Repository = "https://github.com/yet-market/yet-sparql-mcp-server.git"
Issues = "https://github.com/yet-market/yet-sparql-mcp-server/issues"
Changelog = "https://github.com/yet-market/yet-sparql-mcp-server/blob/main/CHANGELOG.md"
Company = "https://yet.lu"

[project.scripts]
mcp-server-sparql = "server:main"

[tool.setuptools]
packages = ["sparql_server"]

[tool.setuptools.package-data]
sparql_server = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["sparql_server"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [".git", "__pycache__", "build", "dist", ".eggs", "*.egg"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["SPARQLWrapper.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["sparql_server"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test

[tool.safety]
ignore = []